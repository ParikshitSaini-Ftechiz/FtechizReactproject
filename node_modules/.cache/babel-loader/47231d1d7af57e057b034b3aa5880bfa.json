{"ast":null,"code":"const FilterReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOAD_FILTER_PRODUCTS\":\n      const priceArr = action.payload.map(currentPrice => currentPrice.price);\n      //1st method//\n      //  console.log(Math.max.apply(null,priceArr));//apply mean it cn convert an array in an integer\n      //  console.log(Math.min.apply(null,priceArr));\n\n      let maxPrice = Math.max(...priceArr); //spread operator as an argument\n      // let minPrice = Math.min(...priceArr);\n      // console.log(minPrice);\n\n      return {\n        ...state,\n        filter_products: [...action.payload],\n        all_products: [...action.payload],\n        filters: {\n          ...state.filters,\n          maxPrice: maxPrice,\n          price: maxPrice\n        }\n      };\n    case \"SET_GRID_VIEW\":\n      return {\n        ...state,\n        grid_view: true\n      };\n    case \"SET_LIST_VIEW\":\n      return {\n        ...state,\n        grid_view: false\n      };\n    case \"GET_SORT_VALUE\":\n      // let userSortValue = document.getElementById(\"sort\");\n      // let sort_value = userSortValue.options[userSortValue.selectedIndex].value;\n\n      return {\n        ...state,\n        sorting_value: action.payload\n      };\n    case \"SORTING_PRODUCTS\":\n      let newSortProduct;\n      const {\n        sorting_value,\n        filter_products\n      } = state;\n      let tempSortProduct = [...filter_products];\n      const sortingProducts = (a, b) => {\n        if (sorting_value === \"lowest\") {\n          return a.price - b.price;\n        }\n        if (sorting_value === \"highest\") {\n          return b.price - a.price;\n        }\n        if (sorting_value === \"a-z\") {\n          return a.name.localCompare(b.name);\n        }\n        if (sorting_value === \"z-a\") {\n          return b.name.localCompare(a.name);\n        }\n      };\n      newSortProduct = tempSortProduct.sort(sortingProducts);\n      console.log(newSortProduct);\n      return {\n        ...state,\n        filter_products: newSortProduct\n      };\n    case \"UPDATE_FIlTER_VAlUE\":\n      const {\n        name,\n        value\n      } = action.payload;\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [name]: value\n        }\n      };\n    case \"FILTER_PRODUCTS\":\n      let {\n        all_products\n      } = state;\n      let tempFilterProduct = [...all_products];\n      const {\n        text,\n        category,\n        company,\n        color,\n        price\n      } = state.filters;\n      if (text) {\n        tempFilterProduct = tempFilterProduct.filter(currentData => {\n          return currentData.name.toLowerCase().includes(text);\n        });\n      }\n      if (category !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter(currentCategory => {\n          return currentCategory.category === category;\n        });\n      }\n      if (company !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter(currentCompany => {\n          return currentCompany.company.toLowerCase().includes(company);\n        });\n      }\n      if (color !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter(currentColor => {\n          return currentColor.colors.includes(color);\n        });\n      }\n      if (price === 0) {\n        tempFilterProduct = tempFilterProduct.filter(currentPrice => currentPrice.price == price);\n      } else {\n        tempFilterProduct = tempFilterProduct.filter(currentPrice => {\n          return currentPrice.price <= price;\n        });\n      }\n      return {\n        ...state,\n        filter_products: tempFilterProduct\n      };\n    case \"CLEAR_FILTER\":\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          text: \"\",\n          category: \"all\",\n          company: \"all\",\n          color: \"all\",\n          minPrice: state.filters.maxPrice,\n          maxPrice: 0,\n          price: state.filters.maxPrice\n        }\n      };\n    default:\n      return state;\n  }\n};\n_c = FilterReducer;\nexport default FilterReducer;\nvar _c;\n$RefreshReg$(_c, \"FilterReducer\");","map":{"version":3,"names":["FilterReducer","state","action","type","priceArr","payload","map","currentPrice","price","maxPrice","Math","max","filter_products","all_products","filters","grid_view","sorting_value","newSortProduct","tempSortProduct","sortingProducts","a","b","name","localCompare","sort","console","log","value","tempFilterProduct","text","category","company","color","filter","currentData","toLowerCase","includes","currentCategory","currentCompany","currentColor","colors","minPrice"],"sources":["/home/hp-pc08/Desktop/project/e_commerce_website/src/components/reducer/FilterReducer.js"],"sourcesContent":["const FilterReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOAD_FILTER_PRODUCTS\":\n      const priceArr = action.payload.map((currentPrice) => currentPrice.price);\n      //1st method//\n      //  console.log(Math.max.apply(null,priceArr));//apply mean it cn convert an array in an integer\n      //  console.log(Math.min.apply(null,priceArr));\n\n      let maxPrice = Math.max(...priceArr); //spread operator as an argument\n      // let minPrice = Math.min(...priceArr);\n      // console.log(minPrice);\n\n      return {\n        ...state,\n        filter_products: [...action.payload],\n        all_products: [...action.payload],\n        filters: { ...state.filters, maxPrice: maxPrice, price: maxPrice },\n      };\n\n    case \"SET_GRID_VIEW\":\n      return {\n        ...state,\n        grid_view: true,\n      };\n    case \"SET_LIST_VIEW\":\n      return {\n        ...state,\n        grid_view: false,\n      };\n\n     case \"GET_SORT_VALUE\":\n      // let userSortValue = document.getElementById(\"sort\");\n      // let sort_value = userSortValue.options[userSortValue.selectedIndex].value;\n\n      return {\n        ...state,\n        sorting_value:action.payload,\n      };\n\n     case \"SORTING_PRODUCTS\":\n      let newSortProduct;\n\n      const {sorting_value, filter_products} = state;\n\n      let tempSortProduct = [...filter_products];\n\n      const sortingProducts = (a,b) => {\n        if(sorting_value === \"lowest\") {\n          return  a.price - b.price\n        }\n        if(sorting_value === \"highest\") {\n          return b.price - a.price\n        }\n         if(sorting_value === \"a-z\"){\n          return a.name.localCompare(b.name);\n       }\n        if(sorting_value === \"z-a\") {\n          return b.name.localCompare(a.name);\n        }\n\n      };\n\n      newSortProduct = tempSortProduct.sort(sortingProducts);\n      console.log(newSortProduct)\n\n      return{\n        ...state,\n        filter_products:newSortProduct,\n      }\n\n    case \"UPDATE_FIlTER_VAlUE\":\n      const { name, value } = action.payload;\n\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [name]: value,\n        },\n      };\n\n    case \"FILTER_PRODUCTS\":\n      let { all_products } = state;\n      let tempFilterProduct = [...all_products];\n\n      const { text, category, company, color, price } = state.filters;\n\n      if (text) {\n        tempFilterProduct = tempFilterProduct.filter((currentData) => {\n          return currentData.name.toLowerCase().includes(text);\n        });\n      }\n      if (category !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter((currentCategory) => {\n          return currentCategory.category === category;\n        });\n      }\n      if (company !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter((currentCompany) => {\n          return currentCompany.company.toLowerCase().includes(company);\n        });\n      }\n      if (color !== \"all\") {\n        tempFilterProduct = tempFilterProduct.filter((currentColor) => {\n          return currentColor.colors.includes(color);\n        });\n      }\n      if (price === 0) {\n        tempFilterProduct = tempFilterProduct.filter(\n          (currentPrice) => currentPrice.price == price\n        );\n      } else {\n        tempFilterProduct = tempFilterProduct.filter((currentPrice) => {\n          return currentPrice.price <= price;\n        });\n      }\n\n      return {\n        ...state,\n        filter_products: tempFilterProduct,\n      };\n\n    case \"CLEAR_FILTER\":\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          text: \"\",\n          category: \"all\",\n          company: \"all\",\n          color: \"all\",\n          minPrice: state.filters.maxPrice,\n          maxPrice: 0,\n          price: state.filters.maxPrice,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default FilterReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}